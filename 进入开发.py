# 4.1 编码规范：
# 1、缩进，保持元素对齐；2、优先选用空格而不是tab；
# 3、每行长度不超过79个字符；4、对于import较多的使用括号进行换行处理；
# 5、换行在二元操作符前，即操作符离要操作的元素较近；
# 6、顶级的类或方法需2个空行，类内部的方法需1个空行，多余的空行用来划分相关函数或代码块；
# 7、每个文、模块、类、函数、方法等需要注释，可简单描述；
# 8、每个import独立一行，放在文件顶部，模块注释之后；
# 9、标准库的引用，第三方库，项目中的其它模块并且加空格，import在前from在后，以字母顺序；
# 10、模块级别的双下划线命名引用在注释之后，import之前；
# 11、字符串引号，尽量使用相同的引号。其它详情见本书4.1.2。

# 4.1.3 django编码风格
# 1、引用顺序和python基本类似，文档注释、双引号模块、import、from等顺序并有空格；
# 2、模板风格，保留引号2边的空格；3、view中的编码规范，使用request不是其它缩写；
# 4、model中的编码规范，使用小写的下划线 命名代替驼峰式命名；
# 5、顺序和空行，字段定义、自定义managers属性、class Meta定义、def __str__方法、
# def save方法、def get_absolute_url方法、其它方法定义顺序并且每种之间有空格；
# 6、遇到带有choices的字段，choices的定义大写。其它详情见本书4.1.3。

# 4.2 虚拟环境，python自带的venv模块；下面命令都是window下操作的。
# 1、创建虚拟环境：py -m venv project-env;
# 2、进入虚拟环境目录，cd project-env；
# 3、激活虚拟环境，project-env\Scripts\activate;
# 4、然后在虚拟环境中安装django，pip install django;
# 5、退出虚拟环境，deactivate。
# virtualenv第三方虚拟环境暂不学习。

# 4.3 合理的项目结构，让一切操作更加轻松。详情见本书4.3.2。
# 4.3.3 django项目结构，注意django的settings的拆分，
# 以及环境变量的修改，manage和wsgi文件的修改；详情见本书4.3.3.

# 4.4 版本管理协作，Git。详情见本书4.4.2.
# git init:初始化版本；
# git status：查看当前状态；一般有4种状态，1、未被追踪；2、已提交到暂存区，但未提交版本管理；
# 3、被追踪的文件发生修改，未添加到暂存区；4、没有文件修改或被追踪。
# 本地代码可提交到远端，先设置仓库地址；之后git push -u origin master推送到远端；同时设定本地master和远端的对应关系。
# 观看关于git的视频进行学习，基本操作会用即可。
